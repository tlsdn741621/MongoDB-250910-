주의사항, 몽고스 중개라우터, 설정 서버 같은 곳에서 일단 하기.

설정 서버 구성 - 상용1
1
mkdir c:\db2\data\config0-0
mkdir c:\db2\data\config0-1
mkdir c:\db2\data\config0-2

2 각 창에 명령어를 하나씩 실행해야 함. 
명령어창에서, c드라이브에서 -> d드라이브로 교체, d: 

mongod --configsvr --replSet config0 --port 27018 --bind_ip 0.0.0.0 --dbpath /db2/data/config0-0 
mongod --configsvr --replSet config0 --port 27019 --bind_ip 0.0.0.0 --dbpath /db2/data/config0-1
mongod --configsvr --replSet config0 --port 27020 --bind_ip 0.0.0.0 --dbpath /db2/data/config0-2


3
mongosh --port 27018

4
rs.initiate(
{
_id : "config0",
configsvr:true,
members: [
{_id:0, host:"localhost:27018"},
{_id:1, host:"localhost:27019"},
{_id:2, host:"localhost:27020"}
]
}
)


샤드 구성1 - 상용2
1
mkdir c:\db2\data\shard0-0
mkdir c:\db2\data\shard0-1
mkdir c:\db2\data\shard0-2

2 각 창에 명령어를 하나씩 실행해야 함. 
mongod --shardsvr --replSet shard0 --port 27021 --bind_ip 0.0.0.0 --dbpath /db2/data/shard0-0 
mongod --shardsvr --replSet shard0 --port 27022 --bind_ip 0.0.0.0 --dbpath /db2/data/shard0-1
mongod --shardsvr --replSet shard0 --port 27023 --bind_ip 0.0.0.0 --dbpath /db2/data/shard0-2

3
mongosh --port 27021

4
rs.initiate(
{
_id : "shard0",
members: [
{_id:0, host:"<본인아이피>:27021"},
{_id:1, host:"<본인아이피>:27022"},
{_id:2, host:"<본인아이피>:27023",arbiterOnly: true}
]
}
)

rs.initiate(
{
_id : "shard0",
members: [
{_id:0, host:"10.100.201.87:27021"},
{_id:1, host:"10.100.201.87:27022"},
{_id:2, host:"10.100.201.87:27023",arbiterOnly: true}
]
}
)

rs.initiate(
{
_id : "shard0",
members: [
{_id:0, host:"localhost:27021"},
{_id:1, host:"localhost:27022"},
{_id:2, host:"localhost:27023",arbiterOnly: true}
]
}
)


샤드 구성2 - 상용3
1
mkdir c:\db2\data\shard1-0
mkdir c:\db2\data\shard1-1
mkdir c:\db2\data\shard1-2

2 각 창에 명령어를 하나씩 실행해야 함. 
mongod --shardsvr --replSet shard1 --port 27031 --bind_ip 0.0.0.0 --dbpath /db2/data/shard1-0
mongod --shardsvr --replSet shard1 --port 27032 --bind_ip 0.0.0.0 --dbpath /db2/data/shard1-1
mongod --shardsvr --replSet shard1 --port 27033 --bind_ip 0.0.0.0 --dbpath /db2/data/shard1-2

3
mongosh --port 27031

4
rs.initiate(
{
_id : "shard1",
members: [
{_id:0, host:"<본인아이피>:27031"},
{_id:1, host:"<본인아이피>:27032"},
{_id:2, host:"<본인아이피>:27033",arbiterOnly: true}
]
}
)

rs.initiate(
{
_id : "shard1",
members: [
{_id:0, host:"localhost:27031"},
{_id:1, host:"localhost:27032"},
{_id:2, host:"localhost:27033",arbiterOnly: true}
]
}
)

샤드 구성3- 상용4
1
mkdir c:\db2\data\shard2-0
mkdir c:\db2\data\shard2-1
mkdir c:\db2\data\shard2-2

2 각 창에 명령어를 하나씩 실행해야 함. 
mongod --shardsvr --replSet shard2 --port 27041 --bind_ip 0.0.0.0 --dbpath /db2/data/shard2-0
mongod --shardsvr --replSet shard2 --port 27042 --bind_ip 0.0.0.0 --dbpath /db2/data/shard2-1
mongod --shardsvr --replSet shard2 --port 27043 --bind_ip 0.0.0.0 --dbpath /db2/data/shard2-2

3
mongosh --port 27041

4
rs.initiate(
{
_id : "shard2",
members: [
{_id:0, host:"<본인아이피>:27041"},
{_id:1, host:"<본인아이피>:27042"},
{_id:2, host:"<본인아이피>:27043",arbiterOnly: true}
]
}
)

rs.initiate(
{
_id : "shard2",
members: [
{_id:0, host:"localhost:27041"},
{_id:1, host:"localhost:27042"},
{_id:2, host:"localhost:27043",arbiterOnly: true}
]
}
)

설정 참고 
security:
  keyFile : C:\Program Files\MongoDB\Server\4.4\keyFile.key
  clusterAuthMode : keyFile
  authorization : enabled 
replication :
  replSetName : rs0



클라이언트에서 연결 

mongos 설정하기. - 상용5

localhost -> 상용1
mongos --configdb config0/localhost:27018 --port 20000

mongos --configdb config0/10.100.201.87:27018 --port 20000

mongos --configdb config0/<설정서버아이피>:27018 --port 20000



mongosh shell 접속 
여기로 접속
mongosh --port 20000 

방법만 참고
다른 아이피 접속하는 옵션 추가
mongosh --host <상대방 아이피> --port 20000

mongosh --port 20000 -u fred -p 1234


use admin
db.grantRolesToUser("fred", ["clusterAdmin"])

use test2345
db.createUser(
  {
    user: "fred",
    pwd: "1234",
    roles: [ { role: "readWrite", db: "test2345" } ]
  }
)


상용 5 
localhost -> 상용2 아이피 
sh.addShard("shard0/localhost:27021")
sh.addShard("shard1/localhost:27031")
sh.addShard("shard2/localhost:27041")

메모 , 7.0.12 에서 
과반수 동의건 설정 필요
클러스터 전역의 기본 쓰기 우려를 과반수(w: "majority")로 설정
use admin
db.adminCommand({
  setDefaultRWConcern: 1,
  defaultWriteConcern: { w: "majority" }
})

db.adminCommand({ getDefaultRWConcern: 1 });

각 샤드 0
rs.remove("localhost:27023");
각 샤드 1
rs.remove("localhost:27033");
각 샤드 2
rs.remove("localhost:27043");



sh.addShard("shard0/10.100.201.87:27021")
sh.addShard("shard1/10.100.201.87:27031")
sh.addShard("shard2/10.100.201.87:27041")

sh.addShard("shard0/10.100.201.52:27021")
sh.addShard("shard1/10.100.201.52:27031")
sh.addShard("shard2/10.100.201.52:27041")

use config
db.shards.find()
use config

sh.enableSharding("test2345")
db.test.createIndex({x:1})

use admin 

sh.shardCollection("test2345.test",{
x:"hashed"
})



use test2345

for(var i = 1; i<12001; i++){
db.test.insertOne({x:i,ename:i,sal:100})
}

db.test.getShardDistribution()

shard0 ::
 mongosh --port 27021
use test2345
db.test.count()

shard1 :: 
mongosh --port 27031
use test2345
db.test.count()

shard2 :: 
mongosh --port 27041
use test2345
db.test.count()

결과 확인. 
컴파스로 20000 접속시 개수 10000개 
컴파스로 27021 접속시 개수 3468개 조회  
해당, 
샤드 서버 접속 후 조회. 
shard0:PRIMARY> use test2345
switched to db test2345
shard0:PRIMARY> db.test.count()
3468